.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "Data::Random::Flexible 3"
.TH Data::Random::Flexible 3 "2017-12-09" "perl v5.26.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Data::Random::Flexible \- Flexible fast\-to\-write profilable randoms
.SH "VERSION"
.IX Header "VERSION"
Version 1.03
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
A more flexible set of randoms for when you want to be random \s-1FAST\s0
.PP
.Vb 1
\&    use Data::Random::Flexible;
\&
\&    use function "say";
\&
\&    my $random = Data::Random::Flexible\->new();
\&
\&    say "32 Character random of numbers?, sure: ".$random\->int(32);
\&
\&    say "16 Character random of letters?, sure: ".$random\->char(16);
\&
\&    say "16 Of a mixture of numbers and letters?, sure: ".$random\->mix(16);
\&
\&    say "Random mixture of 16 your own characters?, sure: ".$random\->profile(\*(Aqirc\*(Aq,16, [qw(a b c 1 2 3)]);
\&    
\&    say "Random mixture of 16 your own characters from a saved profile?, sure: ".$random\->profile(\*(Aqirc\*(Aq,16);
.Ve
.PP
The module can also use alternative provieders for \fIrand()\fR, for more detail look at the \fIengine()\fR function,
the currently supported providers of random are:
.PP
.Vb 8
\&        Math::Random::Secure
\&        Math::Random::MTwist
\&        Math::Random::Xorshift
\&        Math::Random::MT
\&        Math::Random::ISAAC
\&        Math::Random::ISAAC::XS (Not selectable will be used AUTO if availible by Math::Random::ISAAC)
\&        Crypt::PRNG
\&        Your own code reference.
.Ve
.SH "\fInew()\fP"
.IX Header "new()"
Create a new Math::Random::Flexible object, accepts 1 optional argument, a hashref of profiles
.SH "\fIengine()\fP"
.IX Header "engine()"
Return a list of availible engines for \fIrand()\fR, by default the module will always use
CORE::rand, that being perls inbuilt rand. If you want to change it simply provide
your choice as the first argument.
.PP
If you pass in a reference to your own random function it will attempt a test against it
if successful it will use that!
.PP
An example of passing your own:
.PP
.Vb 1
\&    sub mycode { return int(rand(9)) }
\&
\&    $random\->engine(\e&mycode);
.Ve
.PP
If you pass something weird that is not a known engine or a reference, it will not switch
engines but will raise a warning.
.PP
\&\s-1NOTE\s0 Normal every day users just wanting a nice way to get random numbers and such
of a set length need not pay attention to it!
.SH "\fIstore()\fP"
.IX Header "store()"
Set and/or return the stored profiles, will always return the currently used profiles,
unless you pass it something it did not expect as a first argument, where it will return
a blank hashref.
.SH "\fIalpha()\fP"
.IX Header "alpha()"
Return a random alpha character uppercase or lowercase, accepts 1 argument 'length',
if length is ommited return a single alpha-char;
.SS "\fIchar()\fP"
.IX Subsection "char()"
Though technically wrong, its a shorthand to \fIalpha()\fR
.SH "\fInumeric()\fP"
.IX Header "numeric()"
Return a random whole number, accepts 1 argument 'length', if length is ommited 
return a single number.
.SS "\fIint()\fP"
.IX Subsection "int()"
A shorthand for \fInumeric()\fR
.SH "\fIalphanumeric()\fP"
.IX Header "alphanumeric()"
Return a random alphanumeric string, accepts 1 argument 'length', if length is ommited
return a single random alpha or number.
.SS "\fImix()\fP"
.IX Subsection "mix()"
A shorthand for \fIalphanumeric()\fR
.SH "\fIprofile()\fP"
.IX Header "profile()"
Set or adjust a profile of characters to be used for randoms, accepts 3 arguments in
the following usages:
.PP
Create or edit a profile named some_name and return a 16 long string from it
.PP
\&\f(CW$random\fR\->profile('some_name',16,[qw(1 2 3)]);
.PP
Return 16 chars from the pre-saved profile 'some_name'
.PP
\&\f(CW$random\fR\->profile('some_name',16);
.PP
Delete a stored profile
.PP
\&\f(CW$random\fR\->profile('some_name',0,[]);
.SH "AUTHOR"
.IX Header "AUTHOR"
Paul G Webster, \f(CW\*(C`<daemon at cpan.org>\*(C'\fR
.SH "BUGS"
.IX Header "BUGS"
Please report any bugs to: <https://github.com/PaulGWebster/p5\-Data\-Random\-Flexible>
.SH "SUPPORT"
.IX Header "SUPPORT"
You can find documentation for this module with the perldoc command.
.PP
.Vb 1
\&    perldoc p5::Data::Random::Flexible
.Ve
.PP
You can also look for information at:
.IP "\(bu" 4
AnnoCPAN: Annotated \s-1CPAN\s0 documentation
.Sp
<http://annocpan.org/dist/p5\-Data\-Random\-Flexible>
.IP "\(bu" 4
\&\s-1CPAN\s0 Ratings
.Sp
<http://cpanratings.perl.org/d/p5\-Data\-Random\-Flexible>
.IP "\(bu" 4
Search \s-1CPAN\s0
.Sp
<http://search.metacpan.org/dist/p5\-Data\-Random\-Flexible/>
.SH "LICENSE AND COPYRIGHT"
.IX Header "LICENSE AND COPYRIGHT"
Copyright 2017 Paul G Webster.
.PP
This program is distributed under the (Revised) \s-1BSD\s0 License:
<http://www.opensource.org/licenses/BSD\-3\-Clause>
.PP
Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:
.PP
* Redistributions of source code must retain the above copyright
notice, this list of conditions and the following disclaimer.
.PP
* Redistributions in binary form must reproduce the above copyright
notice, this list of conditions and the following disclaimer in the
documentation and/or other materials provided with the distribution.
.PP
* Neither the name of Paul G Webster's Organization
nor the names of its contributors may be used to endorse or promote
products derived from this software without specific prior written
permission.
.PP
\&\s-1THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
\&\*(L"AS IS\*(R" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\s0 (\s-1INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES\s0; \s-1LOSS OF USE,
DATA, OR PROFITS\s0; \s-1OR BUSINESS INTERRUPTION\s0) \s-1HOWEVER CAUSED AND ON ANY
THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\s0
(\s-1INCLUDING NEGLIGENCE OR OTHERWISE\s0) \s-1ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\s0
